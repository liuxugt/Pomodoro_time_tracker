{"ast":null,"code":"import _objectSpread from \"/Users/liuxu/Desktop/GT/2019-spring/cs6301/6301Spring19Web1/PTTWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { projectConstants } from '../actionTypes/project.constant';\nimport _ from 'lodash';\nexport var project = function project() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isLoading: false,\n    errMess: null,\n    list: [],\n    report: {}\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case projectConstants.GET_ALL_PROJECTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          list: action.payload\n        });\n      }\n\n    case projectConstants.PROJECT_CREATE_SUCCESS:\n      {\n        var _project = action.payload;\n        return _objectSpread({}, state, {\n          list: state.list.concat(_project)\n        });\n      }\n\n    case projectConstants.PROJECT_CREATE_FAILED:\n      {\n        return _objectSpread({}, state, {\n          errMess: action.payload\n        });\n      }\n\n    case projectConstants.PROJECT_UPDATE_SUCCESS:\n      {\n        var updated_list = _.map(state.list, function (u) {\n          if (u.id == action.payload.id) {\n            u.projectname = action.payload.projectname;\n          }\n\n          return u;\n        });\n\n        return _objectSpread({}, state, {\n          list: updated_list\n        });\n      }\n\n    case projectConstants.PROJECT_UPDATE_FAILED:\n      {\n        return _objectSpread({}, state, {\n          errMess: action.payload\n        });\n      }\n\n    case projectConstants.PROJECT_DELETE_SUCCESS:\n      {\n        var _updated_list = _.filter(state.list, function (p) {\n          return p.id != action.payload.id;\n        });\n\n        return _objectSpread({}, state, {\n          list: _updated_list\n        });\n      }\n\n    case projectConstants.PROJECT_CLEAR_ERROR_MESSAGE:\n      {\n        return _objectSpread({}, state, {\n          errMess: null\n        });\n      }\n\n    case projectConstants.GET_PROJECT_REPORT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          report: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/liuxu/Desktop/GT/2019-spring/cs6301/6301Spring19Web1/PTTWeb1/src/redux/reducers/project.reducer.ts"],"names":["projectConstants","_","project","state","isLoading","errMess","list","report","action","type","GET_ALL_PROJECTS_SUCCESS","payload","PROJECT_CREATE_SUCCESS","concat","PROJECT_CREATE_FAILED","PROJECT_UPDATE_SUCCESS","updated_list","map","u","id","projectname","PROJECT_UPDATE_FAILED","PROJECT_DELETE_SUCCESS","filter","p","PROJECT_CLEAR_ERROR_MESSAGE","GET_PROJECT_REPORT_SUCCESS"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,iCAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAQlB;AAAA,MAPHC,KAOG,uEAPK;AACNC,IAAAA,SAAS,EAAE,KADL;AAENC,IAAAA,OAAO,EAAE,IAFH;AAGNC,IAAAA,IAAI,EAAE,EAHA;AAINC,IAAAA,MAAM,EAAE;AAJF,GAOL;AAAA,MADHC,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,gBAAgB,CAACU,wBAAtB;AAAgD;AAC9C,iCAAYP,KAAZ;AAAmBG,UAAAA,IAAI,EAAEE,MAAM,CAACG;AAAhC;AACD;;AAED,SAAKX,gBAAgB,CAACY,sBAAtB;AAA8C;AAC5C,YAAIV,QAAO,GAAGM,MAAM,CAACG,OAArB;AACA,iCAAYR,KAAZ;AAAmBG,UAAAA,IAAI,EAAEH,KAAK,CAACG,IAAN,CAAWO,MAAX,CAAkBX,QAAlB;AAAzB;AACD;;AAED,SAAKF,gBAAgB,CAACc,qBAAtB;AAA6C;AAC3C,iCAAYX,KAAZ;AAAmBE,UAAAA,OAAO,EAAEG,MAAM,CAACG;AAAnC;AACD;;AAED,SAAKX,gBAAgB,CAACe,sBAAtB;AAA8C;AAC5C,YAAIC,YAAY,GAAGf,CAAC,CAACgB,GAAF,CAAMd,KAAK,CAACG,IAAZ,EAAkB,UAACY,CAAD,EAAO;AAC1C,cAAIA,CAAC,CAACC,EAAF,IAAQX,MAAM,CAACG,OAAP,CAAeQ,EAA3B,EAA+B;AAC7BD,YAAAA,CAAC,CAACE,WAAF,GAAgBZ,MAAM,CAACG,OAAP,CAAeS,WAA/B;AACD;;AACD,iBAAOF,CAAP;AACD,SALkB,CAAnB;;AAMA,iCAAYf,KAAZ;AAAmBG,UAAAA,IAAI,EAAEU;AAAzB;AAED;;AAED,SAAKhB,gBAAgB,CAACqB,qBAAtB;AAA6C;AAC3C,iCAAYlB,KAAZ;AAAmBE,UAAAA,OAAO,EAAEG,MAAM,CAACG;AAAnC;AACD;;AAED,SAAKX,gBAAgB,CAACsB,sBAAtB;AAA8C;AAC5C,YAAIN,aAAY,GAAGf,CAAC,CAACsB,MAAF,CAASpB,KAAK,CAACG,IAAf,EAAqB,UAAUkB,CAAV,EAAa;AACnD,iBAAOA,CAAC,CAACL,EAAF,IAAQX,MAAM,CAACG,OAAP,CAAeQ,EAA9B;AACD,SAFkB,CAAnB;;AAGA,iCAAYhB,KAAZ;AAAmBG,UAAAA,IAAI,EAAEU;AAAzB;AACD;;AAED,SAAKhB,gBAAgB,CAACyB,2BAAtB;AAAmD;AACjD,iCAAYtB,KAAZ;AAAmBE,UAAAA,OAAO,EAAE;AAA5B;AACD;;AAED,SAAKL,gBAAgB,CAAC0B,0BAAtB;AAAkD;AAChD,iCAAYvB,KAAZ;AAAmBI,UAAAA,MAAM,EAAEC,MAAM,CAACG;AAAlC;AACD;;AAED;AACE,aAAOR,KAAP;AA7CJ;AA+CD,CAxDM","sourcesContent":["import { projectConstants } from '../actionTypes/project.constant';\nimport _ from 'lodash';\n\nexport const project = (\n  state = {\n    isLoading: false,\n    errMess: null,\n    list: [],\n    report: {}\n  },\n  action: any\n) => {\n  switch (action.type) {\n    case projectConstants.GET_ALL_PROJECTS_SUCCESS: {\n      return { ...state, list: action.payload };\n    }\n\n    case projectConstants.PROJECT_CREATE_SUCCESS: {\n      let project = action.payload;\n      return { ...state, list: state.list.concat(project) };\n    }\n\n    case projectConstants.PROJECT_CREATE_FAILED: {\n      return { ...state, errMess: action.payload }\n    }\n\n    case projectConstants.PROJECT_UPDATE_SUCCESS: {\n      let updated_list = _.map(state.list, (u) => {\n        if (u.id == action.payload.id) {\n          u.projectname = action.payload.projectname;\n        }\n        return u\n      })\n      return { ...state, list: updated_list }\n\n    }\n\n    case projectConstants.PROJECT_UPDATE_FAILED: {\n      return { ...state, errMess: action.payload }\n    }\n\n    case projectConstants.PROJECT_DELETE_SUCCESS: {\n      let updated_list = _.filter(state.list, function (p) {\n        return p.id != action.payload.id;\n      });\n      return { ...state, list: updated_list };\n    }\n\n    case projectConstants.PROJECT_CLEAR_ERROR_MESSAGE: {\n      return { ...state, errMess: null }\n    }\n\n    case projectConstants.GET_PROJECT_REPORT_SUCCESS: {\n      return { ...state, report: action.payload }\n    }\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}