{"ast":null,"code":"import _regeneratorRuntime from \"/Users/liuxu/Desktop/GT/2019-spring/cs6301/6301Spring19Web1/PTTWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/liuxu/Desktop/GT/2019-spring/cs6301/6301Spring19Web1/PTTWeb1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { projectConstants } from '../actionTypes/project.constant';\nimport { projectService } from '../../services/project.service';\nimport moment from 'moment';\nexport var fetchAllProjects = function fetchAllProjects(userId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var body, res, projectlist, project_ids, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                body = {\n                  from: moment(\"1960-01-01T03:24:00\").format('YYYY-MM-DDTHH:mm[Z]'),\n                  to: moment().format('YYYY-MM-DDTHH:mm[Z]'),\n                  // from: new Date('1960-01-01T03:24:00'),\n                  // to: new Date(),\n                  completedPomo: true,\n                  hoursWorked: true\n                };\n                _context2.next = 4;\n                return projectService.getUserAllProjects(userId);\n\n              case 4:\n                res = _context2.sent;\n                projectlist = res.data;\n                project_ids = projectlist.map(function (project) {\n                  return project.id;\n                });\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context2.prev = 10;\n                _loop =\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _loop() {\n                  var id, p;\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          id = _step.value;\n                          _context.next = 3;\n                          return projectService.getProjectReport(userId, id, body);\n\n                        case 3:\n                          p = _context.sent;\n                          projectlist.forEach(function (project) {\n                            if (project.id == id) {\n                              project.report = p.data;\n                            }\n                          });\n\n                        case 5:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _iterator = project_ids[Symbol.iterator]();\n\n              case 13:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 15);\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context2.next = 13;\n                break;\n\n              case 18:\n                _context2.next = 24;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t1 = _context2[\"catch\"](10);\n                _didIteratorError = true;\n                _iteratorError = _context2.t1;\n\n              case 24:\n                _context2.prev = 24;\n                _context2.prev = 25;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 27:\n                _context2.prev = 27;\n\n                if (!_didIteratorError) {\n                  _context2.next = 30;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 30:\n                return _context2.finish(27);\n\n              case 31:\n                return _context2.finish(24);\n\n              case 32:\n                return _context2.abrupt(\"return\", dispatch(addAllProjects(projectlist)));\n\n              case 35:\n                _context2.prev = 35;\n                _context2.t2 = _context2[\"catch\"](0);\n                console.log(_context2.t2);\n\n              case 38:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, null, [[0, 35], [10, 20, 24, 32], [25,, 27, 31]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addAllProjects = function addAllProjects(projects) {\n  return {\n    type: projectConstants.GET_ALL_PROJECTS_SUCCESS,\n    payload: projects\n  };\n};\nexport var addProject = function addProject(userId, projectname) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return projectService.addUserProject(userId, projectname);\n\n              case 3:\n                res = _context3.sent;\n                res.data.report = {};\n                return _context3.abrupt(\"return\", dispatch(addProjectHelper(res.data)));\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log(_context3.t0.message);\n                dispatch(addProjectFail(_context3.t0.message));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, null, [[0, 8]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var addProjectHelper = function addProjectHelper(project) {\n  return {\n    type: projectConstants.PROJECT_CREATE_SUCCESS,\n    payload: project\n  };\n};\nexport var addProjectFail = function addProjectFail(status) {\n  return {\n    type: projectConstants.PROJECT_CREATE_FAILED,\n    payload: status\n  };\n};\nexport var putProject = function putProject(_ref3) {\n  var projectname = _ref3.projectname,\n      userId = _ref3.userId,\n      projectId = _ref3.projectId;\n  return function (dispatch) {\n    return projectService.putUserProject(userId, projectId, projectname).then(function (res) {\n      dispatch(updateProject(res.data));\n    }).catch(function (error) {\n      console.log(error.message);\n      dispatch(updateProjectFailed(error.message));\n    });\n  };\n};\nexport var updateProject = function updateProject(project) {\n  return {\n    type: projectConstants.PROJECT_UPDATE_SUCCESS,\n    payload: project\n  };\n};\nexport var updateProjectFailed = function updateProjectFailed(error) {\n  return {\n    type: projectConstants.PROJECT_UPDATE_FAILED,\n    payload: error\n  };\n};\nexport var deleteProject = function deleteProject(userId, projectId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return projectService.deleteUserProject(userId, projectId);\n\n              case 3:\n                res = _context4.sent;\n                return _context4.abrupt(\"return\", dispatch(deleteProjectHelper(res.data)));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var deleteProjectHelper = function deleteProjectHelper(project) {\n  return {\n    type: projectConstants.PROJECT_DELETE_SUCCESS,\n    payload: project\n  };\n};\nexport var clearErrorMessage = function clearErrorMessage() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                return _context5.abrupt(\"return\", dispatch({\n                  type: projectConstants.PROJECT_CLEAR_ERROR_MESSAGE\n                }));\n\n              case 4:\n                _context5.prev = 4;\n                _context5.t0 = _context5[\"catch\"](0);\n                console.log(_context5.t0);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, null, [[0, 4]]);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchProjectReport = function fetchProjectReport(userId, projectId, body) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return projectService.getProjectReport(userId, projectId, body);\n\n              case 3:\n                res = _context6.sent;\n                return _context6.abrupt(\"return\", dispatch(fetchProjectReportHelper(res.data)));\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, null, [[0, 7]]);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchProjectReportHelper = function fetchProjectReportHelper(sessions) {\n  return {\n    type: projectConstants.GET_PROJECT_REPORT_SUCCESS,\n    payload: sessions\n  };\n};","map":{"version":3,"sources":["/Users/liuxu/Desktop/GT/2019-spring/cs6301/6301Spring19Web1/PTTWeb1/src/redux/actionCreators/project.action.ts"],"names":["projectConstants","projectService","moment","fetchAllProjects","userId","dispatch","body","from","format","to","completedPomo","hoursWorked","getUserAllProjects","res","projectlist","data","project_ids","map","project","id","getProjectReport","p","forEach","report","addAllProjects","console","log","projects","type","GET_ALL_PROJECTS_SUCCESS","payload","addProject","projectname","addUserProject","addProjectHelper","message","addProjectFail","PROJECT_CREATE_SUCCESS","status","PROJECT_CREATE_FAILED","putProject","projectId","putUserProject","then","updateProject","catch","error","updateProjectFailed","PROJECT_UPDATE_SUCCESS","PROJECT_UPDATE_FAILED","deleteProject","deleteUserProject","deleteProjectHelper","PROJECT_DELETE_SUCCESS","clearErrorMessage","PROJECT_CLEAR_ERROR_MESSAGE","fetchProjectReport","fetchProjectReportHelper","sessions","GET_PROJECT_REPORT_SUCCESS"],"mappings":"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","sourcesContent":["import { projectConstants } from '../actionTypes/project.constant';\nimport { projectService } from '../../services/project.service';\nimport moment from 'moment';\n\nexport const fetchAllProjects = function (userId: number) {\n   return async function (dispatch) {\n      try {\n         let body = {\n            from: moment(\"1960-01-01T03:24:00\").format('YYYY-MM-DDTHH:mm[Z]'),\n            to: moment().format('YYYY-MM-DDTHH:mm[Z]'),\n            // from: new Date('1960-01-01T03:24:00'),\n            // to: new Date(),\n            completedPomo: true,\n            hoursWorked: true\n         }\n         let res: any = await projectService.getUserAllProjects(userId);\n         let projectlist = res.data;\n\n         let project_ids = projectlist.map(project => project.id);\n         for (const id of project_ids) {\n            let p = await projectService.getProjectReport(userId, id, body);\n            projectlist.forEach(function (project) {\n               if (project.id == id) {\n                  project.report = p.data;\n               }\n            });\n         }\n         return dispatch(addAllProjects(projectlist));\n      } catch (e) {\n         console.log(e);\n      }\n   };\n};\n\nexport const addAllProjects = (projects: any) => ({\n   type: projectConstants.GET_ALL_PROJECTS_SUCCESS,\n   payload: projects\n});\n\nexport const addProject = (userId: number, projectname: string) => async dispatch => {\n   try {\n      let res = await projectService.addUserProject(userId, projectname);\n      res.data.report = {}\n      return dispatch(addProjectHelper(res.data));\n   } catch (e) {\n      console.log(e.message);\n      dispatch(addProjectFail(e.message))\n   }\n};\n\nexport const addProjectHelper = project => {\n   return {\n      type: projectConstants.PROJECT_CREATE_SUCCESS,\n      payload: project\n   };\n};\n\n\nexport const addProjectFail = status => ({\n   type: projectConstants.PROJECT_CREATE_FAILED,\n   payload: status\n});\n\n\nexport const putProject = ({ projectname, userId, projectId }) => dispatch => {\n   return projectService\n      .putUserProject(userId, projectId, projectname)\n      .then((res: any) => {\n         dispatch(updateProject(res.data));\n      })\n      .catch(error => {\n         console.log(error.message)\n         dispatch(updateProjectFailed(error.message))\n      })\n}\n\nexport const updateProject = project => ({\n   type: projectConstants.PROJECT_UPDATE_SUCCESS,\n   payload: project\n});\n\nexport const updateProjectFailed = error => ({\n   type: projectConstants.PROJECT_UPDATE_FAILED,\n   payload: error\n});\n\nexport const deleteProject = (userId: number, projectId: number) => async dispatch => {\n   try {\n      let res = await projectService.deleteUserProject(userId, projectId);\n      return dispatch(deleteProjectHelper(res.data));\n   } catch (e) {\n      console.log(e);\n   }\n};\n\nexport const deleteProjectHelper = project => {\n   return {\n      type: projectConstants.PROJECT_DELETE_SUCCESS,\n      payload: project\n   };\n};\n\nexport const clearErrorMessage = function () {\n   return async function (dispatch) {\n      try {\n         return dispatch({\n            type: projectConstants.PROJECT_CLEAR_ERROR_MESSAGE\n         });\n      } catch (e) {\n         console.log(e);\n      }\n   };\n};\n\nexport const fetchProjectReport = (userId: number, projectId: number, body: any) => async dispatch => {\n   try {\n      let res = await projectService.getProjectReport(userId, projectId, body);\n      return dispatch(fetchProjectReportHelper(res.data));\n   } catch (e) {\n      console.log(e);\n   }\n};\n\nexport const fetchProjectReportHelper = sessions => {\n   return {\n      type: projectConstants.GET_PROJECT_REPORT_SUCCESS,\n      payload: sessions\n   };\n};"]},"metadata":{},"sourceType":"module"}